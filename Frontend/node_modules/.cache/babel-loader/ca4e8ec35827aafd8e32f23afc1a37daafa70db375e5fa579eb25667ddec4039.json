{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { insightsAPI } from '../services/api';\nexport const useMoodData = (days = 30) => {\n  _s();\n  const [moodTrends, setMoodTrends] = useState(null);\n  const [emotionAnalysis, setEmotionAnalysis] = useState(null);\n  const [insights, setInsights] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchMoodTrends = async (daysParam = days) => {\n    try {\n      const response = await insightsAPI.getMoodTrends(daysParam);\n      setMoodTrends(response.data.trends);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch mood trends');\n    }\n  };\n  const fetchEmotionAnalysis = async (daysParam = days) => {\n    try {\n      const response = await insightsAPI.getEmotionAnalysis(daysParam);\n      setEmotionAnalysis(response.data.emotions);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch emotion analysis');\n    }\n  };\n  const fetchInsights = async () => {\n    try {\n      const response = await insightsAPI.getInsights();\n      setInsights(response.data.insights);\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to fetch insights');\n    }\n  };\n  const fetchAllData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      await Promise.all([fetchMoodTrends(), fetchEmotionAnalysis(), fetchInsights()]);\n    } catch (error) {\n      setError('Failed to fetch mood data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAllData();\n  }, [days]);\n  return {\n    moodTrends,\n    emotionAnalysis,\n    insights,\n    loading,\n    error,\n    refreshData: fetchAllData,\n    fetchMoodTrends,\n    fetchEmotionAnalysis,\n    fetchInsights\n  };\n};\n_s(useMoodData, \"JulZ1KaXjnvUqQEYul6j23hV6zw=\");","map":{"version":3,"names":["useState","useEffect","insightsAPI","useMoodData","days","_s","moodTrends","setMoodTrends","emotionAnalysis","setEmotionAnalysis","insights","setInsights","loading","setLoading","error","setError","fetchMoodTrends","daysParam","response","getMoodTrends","data","trends","_error$response","_error$response$data","fetchEmotionAnalysis","getEmotionAnalysis","emotions","_error$response2","_error$response2$data","fetchInsights","getInsights","_error$response3","_error$response3$data","fetchAllData","Promise","all","refreshData"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/hooks/useMoodData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { insightsAPI } from '../services/api';\r\n\r\nexport const useMoodData = (days = 30) => {\r\n    const [moodTrends, setMoodTrends] = useState(null);\r\n    const [emotionAnalysis, setEmotionAnalysis] = useState(null);\r\n    const [insights, setInsights] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchMoodTrends = async (daysParam = days) => {\r\n        try {\r\n            const response = await insightsAPI.getMoodTrends(daysParam);\r\n            setMoodTrends(response.data.trends);\r\n        } catch (error) {\r\n            setError(error.response?.data?.error || 'Failed to fetch mood trends');\r\n        }\r\n    };\r\n\r\n    const fetchEmotionAnalysis = async (daysParam = days) => {\r\n        try {\r\n            const response = await insightsAPI.getEmotionAnalysis(daysParam);\r\n            setEmotionAnalysis(response.data.emotions);\r\n        } catch (error) {\r\n            setError(error.response?.data?.error || 'Failed to fetch emotion analysis');\r\n        }\r\n    };\r\n\r\n    const fetchInsights = async () => {\r\n        try {\r\n            const response = await insightsAPI.getInsights();\r\n            setInsights(response.data.insights);\r\n        } catch (error) {\r\n            setError(error.response?.data?.error || 'Failed to fetch insights');\r\n        }\r\n    };\r\n\r\n    const fetchAllData = async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError(null);\r\n            await Promise.all([\r\n                fetchMoodTrends(),\r\n                fetchEmotionAnalysis(),\r\n                fetchInsights()\r\n            ]);\r\n        } catch (error) {\r\n            setError('Failed to fetch mood data');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAllData();\r\n    }, [days]);\r\n\r\n    return {\r\n        moodTrends,\r\n        emotionAnalysis,\r\n        insights,\r\n        loading,\r\n        error,\r\n        refreshData: fetchAllData,\r\n        fetchMoodTrends,\r\n        fetchEmotionAnalysis,\r\n        fetchInsights\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}