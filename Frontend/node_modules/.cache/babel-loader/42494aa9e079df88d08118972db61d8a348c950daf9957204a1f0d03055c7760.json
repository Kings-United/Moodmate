{"ast":null,"code":"var emojis = require('../build/emoji.json');\n\n// English is loaded by default\nvar enLanguage = require('../languages/en/index');\n// Add emojis\nObject.assign(enLanguage.labels, emojis);\n\n// Cache loaded languages\nvar languages = {\n  en: enLanguage\n};\nmodule.exports = {\n  /**\r\n   * Registers the specified language\r\n   *\r\n   * @param {String} languageCode\r\n   *     - Two-digit code for the language to register\r\n   * @param {Object} language\r\n   *     - The language module to register\r\n   */\n  addLanguage: function (languageCode, language) {\n    if (!language.labels) {\n      throw new Error('language.labels must be defined!');\n    }\n    // Add emojis\n    Object.assign(language.labels, emojis);\n    languages[languageCode] = language;\n  },\n  /**\r\n   * Retrieves a language object from the cache,\r\n   * or tries to load it from the set of supported languages\r\n   *\r\n   * @param {String} languageCode - Two-digit code for the language to fetch\r\n   */\n  getLanguage: function (languageCode) {\n    if (!languageCode) {\n      // Default to english if no language was specified\n      return languages.en;\n    }\n    if (!languages[languageCode]) {\n      // Try to load specified language\n      try {\n        // eslint-disable-next-line max-len\n        var language = require('../languages/' + languageCode + '/index');\n        // Add language to in-memory cache\n        this.addLanguage(languageCode, language);\n      } catch (err) {\n        throw new Error('No language found: ' + languageCode);\n      }\n    }\n    return languages[languageCode];\n  },\n  /**\r\n   * Returns AFINN-165 weighted labels for the specified language\r\n   *\r\n   * @param {String} languageCode - Two-digit language code\r\n   * @return {Object}\r\n   */\n  getLabels: function (languageCode) {\n    var language = this.getLanguage(languageCode);\n    return language.labels;\n  },\n  /**\r\n   * Applies a scoring strategy for the current token\r\n   *\r\n   * @param {String} languageCode - Two-digit language code\r\n   * @param {Array} tokens - Tokens of the phrase to analyze\r\n   * @param {int} cursor - Cursor of the current token being analyzed\r\n   * @param {int} tokenScore - The score of the current token being analyzed\r\n   */\n  applyScoringStrategy: function (languageCode, tokens, cursor, tokenScore) {\n    var language = this.getLanguage(languageCode);\n    // Fallback to default strategy if none was specified\n    // eslint-disable-next-line max-len\n    var scoringStrategy = language.scoringStrategy || defaultScoringStrategy;\n    return scoringStrategy.apply(tokens, cursor, tokenScore);\n  }\n};\nvar defaultScoringStrategy = {\n  apply: function (tokens, cursor, tokenScore) {\n    return tokenScore;\n  }\n};","map":{"version":3,"names":["emojis","require","enLanguage","Object","assign","labels","languages","en","module","exports","addLanguage","languageCode","language","Error","getLanguage","err","getLabels","applyScoringStrategy","tokens","cursor","tokenScore","scoringStrategy","defaultScoringStrategy","apply"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/node_modules/sentiment/lib/language-processor.js"],"sourcesContent":["var emojis = require('../build/emoji.json');\r\n\r\n// English is loaded by default\r\nvar enLanguage = require('../languages/en/index');\r\n// Add emojis\r\nObject.assign(enLanguage.labels, emojis);\r\n\r\n// Cache loaded languages\r\nvar languages = {\r\n    en: enLanguage\r\n};\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Registers the specified language\r\n     *\r\n     * @param {String} languageCode\r\n     *     - Two-digit code for the language to register\r\n     * @param {Object} language\r\n     *     - The language module to register\r\n     */\r\n    addLanguage: function (languageCode, language) {\r\n        if (!language.labels) {\r\n            throw new Error('language.labels must be defined!');\r\n        }\r\n        // Add emojis\r\n        Object.assign(language.labels, emojis);\r\n        languages[languageCode] = language;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a language object from the cache,\r\n     * or tries to load it from the set of supported languages\r\n     *\r\n     * @param {String} languageCode - Two-digit code for the language to fetch\r\n     */\r\n    getLanguage: function(languageCode) {\r\n        if (!languageCode) {\r\n            // Default to english if no language was specified\r\n            return languages.en;\r\n        }\r\n        if (!languages[languageCode]) {\r\n            // Try to load specified language\r\n            try {\r\n                // eslint-disable-next-line max-len\r\n                var language = require('../languages/' + languageCode + '/index');\r\n                // Add language to in-memory cache\r\n                this.addLanguage(languageCode, language);\r\n            } catch (err) {\r\n                throw new Error('No language found: ' + languageCode);\r\n            }\r\n        }\r\n        return languages[languageCode];\r\n    },\r\n\r\n    /**\r\n     * Returns AFINN-165 weighted labels for the specified language\r\n     *\r\n     * @param {String} languageCode - Two-digit language code\r\n     * @return {Object}\r\n     */\r\n    getLabels: function(languageCode) {\r\n        var language = this.getLanguage(languageCode);\r\n        return language.labels;\r\n    },\r\n\r\n    /**\r\n     * Applies a scoring strategy for the current token\r\n     *\r\n     * @param {String} languageCode - Two-digit language code\r\n     * @param {Array} tokens - Tokens of the phrase to analyze\r\n     * @param {int} cursor - Cursor of the current token being analyzed\r\n     * @param {int} tokenScore - The score of the current token being analyzed\r\n     */\r\n    applyScoringStrategy: function(languageCode, tokens, cursor, tokenScore) {\r\n        var language = this.getLanguage(languageCode);\r\n        // Fallback to default strategy if none was specified\r\n        // eslint-disable-next-line max-len\r\n        var scoringStrategy = language.scoringStrategy || defaultScoringStrategy;\r\n        return scoringStrategy.apply(tokens, cursor, tokenScore);\r\n    }\r\n};\r\n\r\nvar defaultScoringStrategy = {\r\n    apply: function(tokens, cursor, tokenScore) {\r\n        return tokenScore;\r\n    }\r\n};\r\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAE3C;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACjD;AACAE,MAAM,CAACC,MAAM,CAACF,UAAU,CAACG,MAAM,EAAEL,MAAM,CAAC;;AAExC;AACA,IAAIM,SAAS,GAAG;EACZC,EAAE,EAAEL;AACR,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,EAAE,SAAAA,CAAUC,YAAY,EAAEC,QAAQ,EAAE;IAC3C,IAAI,CAACA,QAAQ,CAACP,MAAM,EAAE;MAClB,MAAM,IAAIQ,KAAK,CAAC,kCAAkC,CAAC;IACvD;IACA;IACAV,MAAM,CAACC,MAAM,CAACQ,QAAQ,CAACP,MAAM,EAAEL,MAAM,CAAC;IACtCM,SAAS,CAACK,YAAY,CAAC,GAAGC,QAAQ;EACtC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIE,WAAW,EAAE,SAAAA,CAASH,YAAY,EAAE;IAChC,IAAI,CAACA,YAAY,EAAE;MACf;MACA,OAAOL,SAAS,CAACC,EAAE;IACvB;IACA,IAAI,CAACD,SAAS,CAACK,YAAY,CAAC,EAAE;MAC1B;MACA,IAAI;QACA;QACA,IAAIC,QAAQ,GAAGX,OAAO,CAAC,eAAe,GAAGU,YAAY,GAAG,QAAQ,CAAC;QACjE;QACA,IAAI,CAACD,WAAW,CAACC,YAAY,EAAEC,QAAQ,CAAC;MAC5C,CAAC,CAAC,OAAOG,GAAG,EAAE;QACV,MAAM,IAAIF,KAAK,CAAC,qBAAqB,GAAGF,YAAY,CAAC;MACzD;IACJ;IACA,OAAOL,SAAS,CAACK,YAAY,CAAC;EAClC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIK,SAAS,EAAE,SAAAA,CAASL,YAAY,EAAE;IAC9B,IAAIC,QAAQ,GAAG,IAAI,CAACE,WAAW,CAACH,YAAY,CAAC;IAC7C,OAAOC,QAAQ,CAACP,MAAM;EAC1B,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIY,oBAAoB,EAAE,SAAAA,CAASN,YAAY,EAAEO,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAE;IACrE,IAAIR,QAAQ,GAAG,IAAI,CAACE,WAAW,CAACH,YAAY,CAAC;IAC7C;IACA;IACA,IAAIU,eAAe,GAAGT,QAAQ,CAACS,eAAe,IAAIC,sBAAsB;IACxE,OAAOD,eAAe,CAACE,KAAK,CAACL,MAAM,EAAEC,MAAM,EAAEC,UAAU,CAAC;EAC5D;AACJ,CAAC;AAED,IAAIE,sBAAsB,GAAG;EACzBC,KAAK,EAAE,SAAAA,CAASL,MAAM,EAAEC,MAAM,EAAEC,UAAU,EAAE;IACxC,OAAOA,UAAU;EACrB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}