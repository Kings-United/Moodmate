{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{aiAPI}from'../services/api';import{localAIService}from'../services/localAIService';import{fallbackAIService}from'../services/fallbackAIService';import{jsx as _jsx}from\"react/jsx-runtime\";const AIContext=/*#__PURE__*/createContext({});export const useAI=()=>{const context=useContext(AIContext);if(!context){throw new Error('useAI must be used within an AIProvider');}return context;};export const AIProvider=_ref=>{let{children}=_ref;const[isProcessing,setIsProcessing]=useState(false);const[lastResponse,setLastResponse]=useState(null);const analyzeSentiment=async text=>{setIsProcessing(true);try{// Try backend AI first\nconst response=await aiAPI.analyzeSentiment(text);return response.data;}catch(error){console.warn('Backend AI failed, using local AI:',error);// Fallback to local AI\nreturn localAIService.analyzeSentiment(text);}finally{setIsProcessing(false);}};const generateResponse=async function(text,mood){let context=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};setIsProcessing(true);try{// Try backend AI first\nconst response=await aiAPI.generateResponse({text,mood,context});const result=response.data;setLastResponse(result);return result;}catch(error){console.warn('Backend AI failed, using fallback AI:',error);// Fallback to rule-based responses\nconst sentiment=await localAIService.analyzeSentiment(text);const result=fallbackAIService.generateResponse(text,mood,sentiment.score);setLastResponse(result);return result;}finally{setIsProcessing(false);}};const getCrisisSupport=async()=>{try{const response=await aiAPI.getCrisisSupport();return response.data;}catch(error){console.warn('Failed to get crisis support from backend');return fallbackAIService.getCrisisSupport();}};const value={isProcessing,lastResponse,analyzeSentiment,generateResponse,getCrisisSupport};return/*#__PURE__*/_jsx(AIContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","aiAPI","localAIService","fallbackAIService","jsx","_jsx","AIContext","useAI","context","Error","AIProvider","_ref","children","isProcessing","setIsProcessing","lastResponse","setLastResponse","analyzeSentiment","text","response","data","error","console","warn","generateResponse","mood","arguments","length","undefined","result","sentiment","score","getCrisisSupport","value","Provider"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/contexts/AIContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { aiAPI } from '../services/api';\r\nimport { localAIService } from '../services/localAIService';\r\nimport { fallbackAIService } from '../services/fallbackAIService';\r\n\r\nconst AIContext = createContext({});\r\n\r\nexport const useAI = () => {\r\n    const context = useContext(AIContext);\r\n    if (!context) {\r\n        throw new Error('useAI must be used within an AIProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AIProvider = ({ children }) => {\r\n    const [isProcessing, setIsProcessing] = useState(false);\r\n    const [lastResponse, setLastResponse] = useState(null);\r\n\r\n    const analyzeSentiment = async (text) => {\r\n        setIsProcessing(true);\r\n        try {\r\n            // Try backend AI first\r\n            const response = await aiAPI.analyzeSentiment(text);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.warn('Backend AI failed, using local AI:', error);\r\n            // Fallback to local AI\r\n            return localAIService.analyzeSentiment(text);\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    const generateResponse = async (text, mood, context = {}) => {\r\n        setIsProcessing(true);\r\n        try {\r\n            // Try backend AI first\r\n            const response = await aiAPI.generateResponse({ text, mood, context });\r\n            const result = response.data;\r\n            setLastResponse(result);\r\n            return result;\r\n        } catch (error) {\r\n            console.warn('Backend AI failed, using fallback AI:', error);\r\n            // Fallback to rule-based responses\r\n            const sentiment = await localAIService.analyzeSentiment(text);\r\n            const result = fallbackAIService.generateResponse(text, mood, sentiment.score);\r\n            setLastResponse(result);\r\n            return result;\r\n        } finally {\r\n            setIsProcessing(false);\r\n        }\r\n    };\r\n\r\n    const getCrisisSupport = async () => {\r\n        try {\r\n            const response = await aiAPI.getCrisisSupport();\r\n            return response.data;\r\n        } catch (error) {\r\n            console.warn('Failed to get crisis support from backend');\r\n            return fallbackAIService.getCrisisSupport();\r\n        }\r\n    };\r\n\r\n    const value = {\r\n        isProcessing,\r\n        lastResponse,\r\n        analyzeSentiment,\r\n        generateResponse,\r\n        getCrisisSupport\r\n    };\r\n\r\n    return (\r\n        <AIContext.Provider value={value}>\r\n            {children}\r\n        </AIContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}