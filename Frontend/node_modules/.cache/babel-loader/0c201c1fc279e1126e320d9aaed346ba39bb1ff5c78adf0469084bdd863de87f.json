{"ast":null,"code":"import Sentiment from'sentiment';import{emotionKeywords}from'../data/keywords/emotionKeywords';const sentiment=new Sentiment();export const localAIService={analyzeSentiment:text=>{const result=sentiment.analyze(text);// Normalize score to -1 to 1 range\nconst normalizedScore=Math.max(-1,Math.min(1,result.score/10));return{score:normalizedScore,comparative:result.comparative,positive:result.positive,negative:result.negative,confidence:Math.abs(normalizedScore),source:'local'};},detectEmotions:text=>{const lowerText=text.toLowerCase();const emotions={joy:0,sadness:0,anger:0,fear:0,love:0,excitement:0};// Check positive emotions\nif(emotionKeywords.positive){Object.keys(emotionKeywords.positive).forEach(emotion=>{if(emotions.hasOwnProperty(emotion)){emotions[emotion]=emotionKeywords.positive[emotion].filter(keyword=>lowerText.includes(keyword)).length;}});}// Check negative emotions\nif(emotionKeywords.negative){Object.keys(emotionKeywords.negative).forEach(emotion=>{if(emotions.hasOwnProperty(emotion)){emotions[emotion]=emotionKeywords.negative[emotion].filter(keyword=>lowerText.includes(keyword)).length;}});}return emotions;},extractKeywords:text=>{const words=text.toLowerCase().split(/\\s+/);const importantWords=words.filter(word=>word.length>3&&!['the','and','but','for','are','with','this','that','have','will'].includes(word));return importantWords.slice(0,10);}};","map":{"version":3,"names":["Sentiment","emotionKeywords","sentiment","localAIService","analyzeSentiment","text","result","analyze","normalizedScore","Math","max","min","score","comparative","positive","negative","confidence","abs","source","detectEmotions","lowerText","toLowerCase","emotions","joy","sadness","anger","fear","love","excitement","Object","keys","forEach","emotion","hasOwnProperty","filter","keyword","includes","length","extractKeywords","words","split","importantWords","word","slice"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/services/localAIService.js"],"sourcesContent":["import Sentiment from 'sentiment';\r\nimport { emotionKeywords } from '../data/keywords/emotionKeywords';\r\n\r\nconst sentiment = new Sentiment();\r\n\r\nexport const localAIService = {\r\n    analyzeSentiment: (text) => {\r\n        const result = sentiment.analyze(text);\r\n\r\n        // Normalize score to -1 to 1 range\r\n        const normalizedScore = Math.max(-1, Math.min(1, result.score / 10));\r\n\r\n        return {\r\n            score: normalizedScore,\r\n            comparative: result.comparative,\r\n            positive: result.positive,\r\n            negative: result.negative,\r\n            confidence: Math.abs(normalizedScore),\r\n            source: 'local'\r\n        };\r\n    },\r\n\r\n    detectEmotions: (text) => {\r\n        const lowerText = text.toLowerCase();\r\n        const emotions = {\r\n            joy: 0,\r\n            sadness: 0,\r\n            anger: 0,\r\n            fear: 0,\r\n            love: 0,\r\n            excitement: 0\r\n        };\r\n\r\n        // Check positive emotions\r\n        if (emotionKeywords.positive) {\r\n            Object.keys(emotionKeywords.positive).forEach(emotion => {\r\n                if (emotions.hasOwnProperty(emotion)) {\r\n                    emotions[emotion] = emotionKeywords.positive[emotion]\r\n                        .filter(keyword => lowerText.includes(keyword)).length;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check negative emotions\r\n        if (emotionKeywords.negative) {\r\n            Object.keys(emotionKeywords.negative).forEach(emotion => {\r\n                if (emotions.hasOwnProperty(emotion)) {\r\n                    emotions[emotion] = emotionKeywords.negative[emotion]\r\n                        .filter(keyword => lowerText.includes(keyword)).length;\r\n                }\r\n            });\r\n        }\r\n\r\n        return emotions;\r\n    },\r\n\r\n    extractKeywords: (text) => {\r\n        const words = text.toLowerCase().split(/\\s+/);\r\n        const importantWords = words.filter(word =>\r\n            word.length > 3 &&\r\n            !['the', 'and', 'but', 'for', 'are', 'with', 'this', 'that', 'have', 'will'].includes(word)\r\n        );\r\n\r\n        return importantWords.slice(0, 10);\r\n    }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,WAAW,CACjC,OAASC,eAAe,KAAQ,kCAAkC,CAElE,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAF,SAAS,CAAC,CAAC,CAEjC,MAAO,MAAM,CAAAG,cAAc,CAAG,CAC1BC,gBAAgB,CAAGC,IAAI,EAAK,CACxB,KAAM,CAAAC,MAAM,CAAGJ,SAAS,CAACK,OAAO,CAACF,IAAI,CAAC,CAEtC;AACA,KAAM,CAAAG,eAAe,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAAED,IAAI,CAACE,GAAG,CAAC,CAAC,CAAEL,MAAM,CAACM,KAAK,CAAG,EAAE,CAAC,CAAC,CAEpE,MAAO,CACHA,KAAK,CAAEJ,eAAe,CACtBK,WAAW,CAAEP,MAAM,CAACO,WAAW,CAC/BC,QAAQ,CAAER,MAAM,CAACQ,QAAQ,CACzBC,QAAQ,CAAET,MAAM,CAACS,QAAQ,CACzBC,UAAU,CAAEP,IAAI,CAACQ,GAAG,CAACT,eAAe,CAAC,CACrCU,MAAM,CAAE,OACZ,CAAC,CACL,CAAC,CAEDC,cAAc,CAAGd,IAAI,EAAK,CACtB,KAAM,CAAAe,SAAS,CAAGf,IAAI,CAACgB,WAAW,CAAC,CAAC,CACpC,KAAM,CAAAC,QAAQ,CAAG,CACbC,GAAG,CAAE,CAAC,CACNC,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CAAC,CACRC,IAAI,CAAE,CAAC,CACPC,IAAI,CAAE,CAAC,CACPC,UAAU,CAAE,CAChB,CAAC,CAED;AACA,GAAI3B,eAAe,CAACa,QAAQ,CAAE,CAC1Be,MAAM,CAACC,IAAI,CAAC7B,eAAe,CAACa,QAAQ,CAAC,CAACiB,OAAO,CAACC,OAAO,EAAI,CACrD,GAAIV,QAAQ,CAACW,cAAc,CAACD,OAAO,CAAC,CAAE,CAClCV,QAAQ,CAACU,OAAO,CAAC,CAAG/B,eAAe,CAACa,QAAQ,CAACkB,OAAO,CAAC,CAChDE,MAAM,CAACC,OAAO,EAAIf,SAAS,CAACgB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAACE,MAAM,CAC9D,CACJ,CAAC,CAAC,CACN,CAEA;AACA,GAAIpC,eAAe,CAACc,QAAQ,CAAE,CAC1Bc,MAAM,CAACC,IAAI,CAAC7B,eAAe,CAACc,QAAQ,CAAC,CAACgB,OAAO,CAACC,OAAO,EAAI,CACrD,GAAIV,QAAQ,CAACW,cAAc,CAACD,OAAO,CAAC,CAAE,CAClCV,QAAQ,CAACU,OAAO,CAAC,CAAG/B,eAAe,CAACc,QAAQ,CAACiB,OAAO,CAAC,CAChDE,MAAM,CAACC,OAAO,EAAIf,SAAS,CAACgB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAACE,MAAM,CAC9D,CACJ,CAAC,CAAC,CACN,CAEA,MAAO,CAAAf,QAAQ,CACnB,CAAC,CAEDgB,eAAe,CAAGjC,IAAI,EAAK,CACvB,KAAM,CAAAkC,KAAK,CAAGlC,IAAI,CAACgB,WAAW,CAAC,CAAC,CAACmB,KAAK,CAAC,KAAK,CAAC,CAC7C,KAAM,CAAAC,cAAc,CAAGF,KAAK,CAACL,MAAM,CAACQ,IAAI,EACpCA,IAAI,CAACL,MAAM,CAAG,CAAC,EACf,CAAC,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,MAAM,CAAE,MAAM,CAAE,MAAM,CAAE,MAAM,CAAE,MAAM,CAAC,CAACD,QAAQ,CAACM,IAAI,CAC9F,CAAC,CAED,MAAO,CAAAD,cAAc,CAACE,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CACtC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}