{"ast":null,"code":"import Sentiment from 'sentiment';\nimport { emotionKeywords } from '../data/keywords/emotionKeywords';\nconst sentiment = new Sentiment();\nexport const localAIService = {\n  analyzeSentiment: text => {\n    const result = sentiment.analyze(text);\n\n    // Normalize score to -1 to 1 range\n    const normalizedScore = Math.max(-1, Math.min(1, result.score / 10));\n    return {\n      score: normalizedScore,\n      comparative: result.comparative,\n      positive: result.positive,\n      negative: result.negative,\n      confidence: Math.abs(normalizedScore),\n      source: 'local'\n    };\n  },\n  detectEmotions: text => {\n    const lowerText = text.toLowerCase();\n    const emotions = {\n      joy: 0,\n      sadness: 0,\n      anger: 0,\n      fear: 0,\n      love: 0,\n      excitement: 0\n    };\n\n    // Check positive emotions\n    if (emotionKeywords.positive) {\n      Object.keys(emotionKeywords.positive).forEach(emotion => {\n        if (emotions.hasOwnProperty(emotion)) {\n          emotions[emotion] = emotionKeywords.positive[emotion].filter(keyword => lowerText.includes(keyword)).length;\n        }\n      });\n    }\n\n    // Check negative emotions\n    if (emotionKeywords.negative) {\n      Object.keys(emotionKeywords.negative).forEach(emotion => {\n        if (emotions.hasOwnProperty(emotion)) {\n          emotions[emotion] = emotionKeywords.negative[emotion].filter(keyword => lowerText.includes(keyword)).length;\n        }\n      });\n    }\n    return emotions;\n  },\n  extractKeywords: text => {\n    const words = text.toLowerCase().split(/\\s+/);\n    const importantWords = words.filter(word => word.length > 3 && !['the', 'and', 'but', 'for', 'are', 'with', 'this', 'that', 'have', 'will'].includes(word));\n    return importantWords.slice(0, 10);\n  }\n};","map":{"version":3,"names":["Sentiment","emotionKeywords","sentiment","localAIService","analyzeSentiment","text","result","analyze","normalizedScore","Math","max","min","score","comparative","positive","negative","confidence","abs","source","detectEmotions","lowerText","toLowerCase","emotions","joy","sadness","anger","fear","love","excitement","Object","keys","forEach","emotion","hasOwnProperty","filter","keyword","includes","length","extractKeywords","words","split","importantWords","word","slice"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/services/localAIService.js"],"sourcesContent":["import Sentiment from 'sentiment';\r\nimport { emotionKeywords } from '../data/keywords/emotionKeywords';\r\n\r\nconst sentiment = new Sentiment();\r\n\r\nexport const localAIService = {\r\n    analyzeSentiment: (text) => {\r\n        const result = sentiment.analyze(text);\r\n\r\n        // Normalize score to -1 to 1 range\r\n        const normalizedScore = Math.max(-1, Math.min(1, result.score / 10));\r\n\r\n        return {\r\n            score: normalizedScore,\r\n            comparative: result.comparative,\r\n            positive: result.positive,\r\n            negative: result.negative,\r\n            confidence: Math.abs(normalizedScore),\r\n            source: 'local'\r\n        };\r\n    },\r\n\r\n    detectEmotions: (text) => {\r\n        const lowerText = text.toLowerCase();\r\n        const emotions = {\r\n            joy: 0,\r\n            sadness: 0,\r\n            anger: 0,\r\n            fear: 0,\r\n            love: 0,\r\n            excitement: 0\r\n        };\r\n\r\n        // Check positive emotions\r\n        if (emotionKeywords.positive) {\r\n            Object.keys(emotionKeywords.positive).forEach(emotion => {\r\n                if (emotions.hasOwnProperty(emotion)) {\r\n                    emotions[emotion] = emotionKeywords.positive[emotion]\r\n                        .filter(keyword => lowerText.includes(keyword)).length;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check negative emotions\r\n        if (emotionKeywords.negative) {\r\n            Object.keys(emotionKeywords.negative).forEach(emotion => {\r\n                if (emotions.hasOwnProperty(emotion)) {\r\n                    emotions[emotion] = emotionKeywords.negative[emotion]\r\n                        .filter(keyword => lowerText.includes(keyword)).length;\r\n                }\r\n            });\r\n        }\r\n\r\n        return emotions;\r\n    },\r\n\r\n    extractKeywords: (text) => {\r\n        const words = text.toLowerCase().split(/\\s+/);\r\n        const importantWords = words.filter(word =>\r\n            word.length > 3 &&\r\n            !['the', 'and', 'but', 'for', 'are', 'with', 'this', 'that', 'have', 'will'].includes(word)\r\n        );\r\n\r\n        return importantWords.slice(0, 10);\r\n    }\r\n};"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAASC,eAAe,QAAQ,kCAAkC;AAElE,MAAMC,SAAS,GAAG,IAAIF,SAAS,CAAC,CAAC;AAEjC,OAAO,MAAMG,cAAc,GAAG;EAC1BC,gBAAgB,EAAGC,IAAI,IAAK;IACxB,MAAMC,MAAM,GAAGJ,SAAS,CAACK,OAAO,CAACF,IAAI,CAAC;;IAEtC;IACA,MAAMG,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,MAAM,CAACM,KAAK,GAAG,EAAE,CAAC,CAAC;IAEpE,OAAO;MACHA,KAAK,EAAEJ,eAAe;MACtBK,WAAW,EAAEP,MAAM,CAACO,WAAW;MAC/BC,QAAQ,EAAER,MAAM,CAACQ,QAAQ;MACzBC,QAAQ,EAAET,MAAM,CAACS,QAAQ;MACzBC,UAAU,EAAEP,IAAI,CAACQ,GAAG,CAACT,eAAe,CAAC;MACrCU,MAAM,EAAE;IACZ,CAAC;EACL,CAAC;EAEDC,cAAc,EAAGd,IAAI,IAAK;IACtB,MAAMe,SAAS,GAAGf,IAAI,CAACgB,WAAW,CAAC,CAAC;IACpC,MAAMC,QAAQ,GAAG;MACbC,GAAG,EAAE,CAAC;MACNC,OAAO,EAAE,CAAC;MACVC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,CAAC;MACPC,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IAChB,CAAC;;IAED;IACA,IAAI3B,eAAe,CAACa,QAAQ,EAAE;MAC1Be,MAAM,CAACC,IAAI,CAAC7B,eAAe,CAACa,QAAQ,CAAC,CAACiB,OAAO,CAACC,OAAO,IAAI;QACrD,IAAIV,QAAQ,CAACW,cAAc,CAACD,OAAO,CAAC,EAAE;UAClCV,QAAQ,CAACU,OAAO,CAAC,GAAG/B,eAAe,CAACa,QAAQ,CAACkB,OAAO,CAAC,CAChDE,MAAM,CAACC,OAAO,IAAIf,SAAS,CAACgB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAACE,MAAM;QAC9D;MACJ,CAAC,CAAC;IACN;;IAEA;IACA,IAAIpC,eAAe,CAACc,QAAQ,EAAE;MAC1Bc,MAAM,CAACC,IAAI,CAAC7B,eAAe,CAACc,QAAQ,CAAC,CAACgB,OAAO,CAACC,OAAO,IAAI;QACrD,IAAIV,QAAQ,CAACW,cAAc,CAACD,OAAO,CAAC,EAAE;UAClCV,QAAQ,CAACU,OAAO,CAAC,GAAG/B,eAAe,CAACc,QAAQ,CAACiB,OAAO,CAAC,CAChDE,MAAM,CAACC,OAAO,IAAIf,SAAS,CAACgB,QAAQ,CAACD,OAAO,CAAC,CAAC,CAACE,MAAM;QAC9D;MACJ,CAAC,CAAC;IACN;IAEA,OAAOf,QAAQ;EACnB,CAAC;EAEDgB,eAAe,EAAGjC,IAAI,IAAK;IACvB,MAAMkC,KAAK,GAAGlC,IAAI,CAACgB,WAAW,CAAC,CAAC,CAACmB,KAAK,CAAC,KAAK,CAAC;IAC7C,MAAMC,cAAc,GAAGF,KAAK,CAACL,MAAM,CAACQ,IAAI,IACpCA,IAAI,CAACL,MAAM,GAAG,CAAC,IACf,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAACD,QAAQ,CAACM,IAAI,CAC9F,CAAC;IAED,OAAOD,cAAc,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}