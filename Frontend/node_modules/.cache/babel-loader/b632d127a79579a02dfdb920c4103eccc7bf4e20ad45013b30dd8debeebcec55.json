{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext({});export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState('light');useEffect(()=>{const savedTheme=localStorage.getItem('moodmate-theme');if(savedTheme){setTheme(savedTheme);}},[]);useEffect(()=>{document.body.className=\"theme-\".concat(theme);localStorage.setItem('moodmate-theme',theme);},[theme]);const toggleTheme=()=>{setTheme(prev=>prev==='light'?'dark':'light');};const value={theme,setTheme,toggleTheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","useTheme","context","Error","ThemeProvider","_ref","children","theme","setTheme","savedTheme","localStorage","getItem","document","body","className","concat","setItem","toggleTheme","prev","value","Provider"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst ThemeContext = createContext({});\r\n\r\nexport const useTheme = () => {\r\n    const context = useContext(ThemeContext);\r\n    if (!context) {\r\n        throw new Error('useTheme must be used within a ThemeProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n    const [theme, setTheme] = useState('light');\r\n\r\n    useEffect(() => {\r\n        const savedTheme = localStorage.getItem('moodmate-theme');\r\n        if (savedTheme) {\r\n            setTheme(savedTheme);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.body.className = `theme-${theme}`;\r\n        localStorage.setItem('moodmate-theme', theme);\r\n    }, [theme]);\r\n\r\n    const toggleTheme = () => {\r\n        setTheme(prev => prev === 'light' ? 'dark' : 'light');\r\n    };\r\n\r\n    const value = {\r\n        theme,\r\n        setTheme,\r\n        toggleTheme\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={value}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAAC,CAAC,CAEtC,MAAO,MAAM,CAAAO,QAAQ,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,OAAO,CAAGP,UAAU,CAACK,YAAY,CAAC,CACxC,GAAI,CAACE,OAAO,CAAE,CACV,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACnE,CACA,MAAO,CAAAD,OAAO,CAClB,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACtC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,OAAO,CAAC,CAE3CC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAY,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CACzD,GAAIF,UAAU,CAAE,CACZD,QAAQ,CAACC,UAAU,CAAC,CACxB,CACJ,CAAC,CAAE,EAAE,CAAC,CAENZ,SAAS,CAAC,IAAM,CACZe,QAAQ,CAACC,IAAI,CAACC,SAAS,UAAAC,MAAA,CAAYR,KAAK,CAAE,CAC1CG,YAAY,CAACM,OAAO,CAAC,gBAAgB,CAAET,KAAK,CAAC,CACjD,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAU,WAAW,CAAGA,CAAA,GAAM,CACtBT,QAAQ,CAACU,IAAI,EAAIA,IAAI,GAAK,OAAO,CAAG,MAAM,CAAG,OAAO,CAAC,CACzD,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACVZ,KAAK,CACLC,QAAQ,CACRS,WACJ,CAAC,CAED,mBACIlB,IAAA,CAACC,YAAY,CAACoB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAb,QAAA,CAC/BA,QAAQ,CACU,CAAC,CAEhC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}