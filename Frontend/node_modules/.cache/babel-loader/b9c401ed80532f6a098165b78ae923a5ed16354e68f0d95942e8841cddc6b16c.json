{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mayur\\\\OneDrive\\\\Desktop\\\\Moodmate\\\\Frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { auth } from '../services/firebase';\nimport { authAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuthContext = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuthContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Monitor auth state changes\n  useEffect(() => {\n    console.log('🔐 Setting up Firebase auth state listener...');\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      try {\n        console.log('🔄 Auth state changed:', firebaseUser ? 'User logged in' : 'User logged out');\n        if (firebaseUser) {\n          console.log('👤 Firebase user details:', {\n            uid: firebaseUser.uid,\n            email: firebaseUser.email,\n            displayName: firebaseUser.displayName,\n            emailVerified: firebaseUser.emailVerified\n          });\n\n          // Register/login with backend\n          console.log('🔄 Attempting to login with backend...');\n          await authAPI.login();\n          console.log('✅ Backend login successful');\n          setUser({\n            uid: firebaseUser.uid,\n            email: firebaseUser.email,\n            displayName: firebaseUser.displayName,\n            photoURL: firebaseUser.photoURL\n          });\n        } else {\n          console.log('👋 User logged out');\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('❌ Auth state change error:', {\n          code: error.code,\n          message: error.message,\n          stack: error.stack\n        });\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return unsubscribe;\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('🔐 Attempting login for:', email);\n      setError(null);\n      setLoading(true);\n      const result = await signInWithEmailAndPassword(auth, email, password);\n      console.log('✅ Firebase login successful:', {\n        uid: result.user.uid,\n        email: result.user.email\n      });\n      return result.user;\n    } catch (error) {\n      console.error('❌ Firebase login error:', {\n        code: error.code,\n        message: error.message,\n        email: email\n      });\n\n      // Provide user-friendly error messages\n      let userMessage = 'Login failed. Please try again.';\n      switch (error.code) {\n        case 'auth/user-not-found':\n          userMessage = 'No account found with this email address.';\n          break;\n        case 'auth/wrong-password':\n          userMessage = 'Incorrect password. Please try again.';\n          break;\n        case 'auth/invalid-email':\n          userMessage = 'Please enter a valid email address.';\n          break;\n        case 'auth/too-many-requests':\n          userMessage = 'Too many failed attempts. Please try again later.';\n          break;\n        case 'auth/network-request-failed':\n          userMessage = 'Network error. Please check your connection.';\n          break;\n        case 'auth/internal-error':\n          userMessage = 'Firebase service error. Please try again.';\n          break;\n        default:\n          userMessage = error.message;\n      }\n      setError(userMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password, displayName) => {\n    try {\n      console.log('📝 Attempting registration for:', email);\n      setError(null);\n      setLoading(true);\n\n      // Create Firebase user\n      console.log('🔄 Creating Firebase user...');\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      console.log('✅ Firebase user created:', result.user.uid);\n\n      // Update display name\n      console.log('🔄 Updating display name...');\n      await updateProfile(result.user, {\n        displayName\n      });\n      console.log('✅ Display name updated');\n\n      // Register with backend\n      console.log('🔄 Registering with backend...');\n      await authAPI.register({\n        uid: result.user.uid,\n        email: result.user.email,\n        name: displayName\n      });\n      console.log('✅ Backend registration successful');\n      return result.user;\n    } catch (error) {\n      console.error('❌ Registration error:', {\n        code: error.code,\n        message: error.message,\n        email: email\n      });\n\n      // Provide user-friendly error messages\n      let userMessage = 'Registration failed. Please try again.';\n      switch (error.code) {\n        case 'auth/email-already-in-use':\n          userMessage = 'An account with this email already exists.';\n          break;\n        case 'auth/invalid-email':\n          userMessage = 'Please enter a valid email address.';\n          break;\n        case 'auth/weak-password':\n          userMessage = 'Password should be at least 6 characters long.';\n          break;\n        case 'auth/network-request-failed':\n          userMessage = 'Network error. Please check your connection.';\n          break;\n        default:\n          userMessage = error.message;\n      }\n      setError(userMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      console.log('🚪 Attempting logout...');\n      setError(null);\n      await signOut(auth);\n      console.log('✅ Logout successful');\n    } catch (error) {\n      console.error('❌ Logout error:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n  const updateUserProfile = async profileData => {\n    try {\n      console.log('🔄 Updating user profile...');\n      setError(null);\n\n      // Update Firebase profile\n      if (profileData.displayName) {\n        console.log('🔄 Updating Firebase display name...');\n        await updateProfile(auth.currentUser, {\n          displayName: profileData.displayName\n        });\n        console.log('✅ Firebase profile updated');\n      }\n\n      // Update backend profile\n      console.log('🔄 Updating backend profile...');\n      await authAPI.updateProfile(profileData);\n      console.log('✅ Backend profile updated');\n\n      // Update local state\n      setUser(prev => ({\n        ...prev,\n        displayName: profileData.displayName || prev.displayName\n      }));\n    } catch (error) {\n      console.error('❌ Profile update error:', error);\n      setError(error.message);\n      throw error;\n    }\n  };\n  const clearError = () => setError(null);\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateUserProfile,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","auth","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuthContext","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","console","log","unsubscribe","firebaseUser","uid","email","displayName","emailVerified","login","photoURL","code","message","stack","password","result","userMessage","register","name","logout","updateUserProfile","profileData","currentUser","prev","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mayur/OneDrive/Desktop/Moodmate/Frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport {\r\n    signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword,\r\n    signOut,\r\n    onAuthStateChanged,\r\n    updateProfile\r\n} from 'firebase/auth';\r\nimport { auth } from '../services/firebase';\r\nimport { authAPI } from '../services/api';\r\n\r\nconst AuthContext = createContext({});\r\n\r\nexport const useAuthContext = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuthContext must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Monitor auth state changes\r\n    useEffect(() => {\r\n        console.log('🔐 Setting up Firebase auth state listener...');\r\n        \r\n        const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n            try {\r\n                console.log('🔄 Auth state changed:', firebaseUser ? 'User logged in' : 'User logged out');\r\n                \r\n                if (firebaseUser) {\r\n                    console.log('👤 Firebase user details:', {\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        emailVerified: firebaseUser.emailVerified\r\n                    });\r\n                    \r\n                    // Register/login with backend\r\n                    console.log('🔄 Attempting to login with backend...');\r\n                    await authAPI.login();\r\n                    console.log('✅ Backend login successful');\r\n                    \r\n                    setUser({\r\n                        uid: firebaseUser.uid,\r\n                        email: firebaseUser.email,\r\n                        displayName: firebaseUser.displayName,\r\n                        photoURL: firebaseUser.photoURL\r\n                    });\r\n                } else {\r\n                    console.log('👋 User logged out');\r\n                    setUser(null);\r\n                }\r\n            } catch (error) {\r\n                console.error('❌ Auth state change error:', {\r\n                    code: error.code,\r\n                    message: error.message,\r\n                    stack: error.stack\r\n                });\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            console.log('🔐 Attempting login for:', email);\r\n            setError(null);\r\n            setLoading(true);\r\n            \r\n            const result = await signInWithEmailAndPassword(auth, email, password);\r\n            console.log('✅ Firebase login successful:', {\r\n                uid: result.user.uid,\r\n                email: result.user.email\r\n            });\r\n            \r\n            return result.user;\r\n        } catch (error) {\r\n            console.error('❌ Firebase login error:', {\r\n                code: error.code,\r\n                message: error.message,\r\n                email: email\r\n            });\r\n            \r\n            // Provide user-friendly error messages\r\n            let userMessage = 'Login failed. Please try again.';\r\n            \r\n            switch (error.code) {\r\n                case 'auth/user-not-found':\r\n                    userMessage = 'No account found with this email address.';\r\n                    break;\r\n                case 'auth/wrong-password':\r\n                    userMessage = 'Incorrect password. Please try again.';\r\n                    break;\r\n                case 'auth/invalid-email':\r\n                    userMessage = 'Please enter a valid email address.';\r\n                    break;\r\n                case 'auth/too-many-requests':\r\n                    userMessage = 'Too many failed attempts. Please try again later.';\r\n                    break;\r\n                case 'auth/network-request-failed':\r\n                    userMessage = 'Network error. Please check your connection.';\r\n                    break;\r\n                case 'auth/internal-error':\r\n                    userMessage = 'Firebase service error. Please try again.';\r\n                    break;\r\n                default:\r\n                    userMessage = error.message;\r\n            }\r\n            \r\n            setError(userMessage);\r\n            throw error;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const register = async (email, password, displayName) => {\r\n        try {\r\n            console.log('📝 Attempting registration for:', email);\r\n            setError(null);\r\n            setLoading(true);\r\n\r\n            // Create Firebase user\r\n            console.log('🔄 Creating Firebase user...');\r\n            const result = await createUserWithEmailAndPassword(auth, email, password);\r\n            console.log('✅ Firebase user created:', result.user.uid);\r\n\r\n            // Update display name\r\n            console.log('🔄 Updating display name...');\r\n            await updateProfile(result.user, { displayName });\r\n            console.log('✅ Display name updated');\r\n\r\n            // Register with backend\r\n            console.log('🔄 Registering with backend...');\r\n            await authAPI.register({\r\n                uid: result.user.uid,\r\n                email: result.user.email,\r\n                name: displayName\r\n            });\r\n            console.log('✅ Backend registration successful');\r\n\r\n            return result.user;\r\n        } catch (error) {\r\n            console.error('❌ Registration error:', {\r\n                code: error.code,\r\n                message: error.message,\r\n                email: email\r\n            });\r\n            \r\n            // Provide user-friendly error messages\r\n            let userMessage = 'Registration failed. Please try again.';\r\n            \r\n            switch (error.code) {\r\n                case 'auth/email-already-in-use':\r\n                    userMessage = 'An account with this email already exists.';\r\n                    break;\r\n                case 'auth/invalid-email':\r\n                    userMessage = 'Please enter a valid email address.';\r\n                    break;\r\n                case 'auth/weak-password':\r\n                    userMessage = 'Password should be at least 6 characters long.';\r\n                    break;\r\n                case 'auth/network-request-failed':\r\n                    userMessage = 'Network error. Please check your connection.';\r\n                    break;\r\n                default:\r\n                    userMessage = error.message;\r\n            }\r\n            \r\n            setError(userMessage);\r\n            throw error;\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        try {\r\n            console.log('🚪 Attempting logout...');\r\n            setError(null);\r\n            await signOut(auth);\r\n            console.log('✅ Logout successful');\r\n        } catch (error) {\r\n            console.error('❌ Logout error:', error);\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const updateUserProfile = async (profileData) => {\r\n        try {\r\n            console.log('🔄 Updating user profile...');\r\n            setError(null);\r\n\r\n            // Update Firebase profile\r\n            if (profileData.displayName) {\r\n                console.log('🔄 Updating Firebase display name...');\r\n                await updateProfile(auth.currentUser, {\r\n                    displayName: profileData.displayName\r\n                });\r\n                console.log('✅ Firebase profile updated');\r\n            }\r\n\r\n            // Update backend profile\r\n            console.log('🔄 Updating backend profile...');\r\n            await authAPI.updateProfile(profileData);\r\n            console.log('✅ Backend profile updated');\r\n\r\n            // Update local state\r\n            setUser(prev => ({\r\n                ...prev,\r\n                displayName: profileData.displayName || prev.displayName\r\n            }));\r\n\r\n        } catch (error) {\r\n            console.error('❌ Profile update error:', error);\r\n            setError(error.message);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    const value = {\r\n        user,\r\n        loading,\r\n        error,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateUserProfile,\r\n        clearError\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}